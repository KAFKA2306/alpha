[
  {
    "name": "graph_multi_scale_mixing",
    "category": "mixing",
    "description": "Mix information across multi_scale using graph mechanism",
    "parameters": {
      "mixing_type": "graph",
      "domain": "multi_scale",
      "mixing_ratio": 0.8,
      "interaction_depth": 2
    },
    "complexity": "medium",
    "components": [
      "information_mixing",
      "cross_connections",
      "feature_interaction"
    ],
    "template_name": "{mixing_type}_{domain}_mixing"
  },
  {
    "name": "hierarchical_temporal_attention",
    "category": "attention",
    "description": "hierarchical attention mechanism for temporal modeling",
    "parameters": {
      "attention_type": "hierarchical",
      "scope": "temporal",
      "num_heads": 4,
      "attention_dropout": 0.1
    },
    "complexity": "medium",
    "components": [
      "attention_weights",
      "key_value_query",
      "attention_pooling"
    ],
    "template_name": "{attention_type}_{scope}_attention"
  },
  {
    "name": "statistical_dictionary_learning_feature",
    "category": "feature_extraction",
    "description": "Extract statistical features using dictionary_learning decomposition",
    "parameters": {
      "domain": "statistical",
      "method": "dictionary_learning",
      "n_components": 16,
      "sparsity_level": 0.7
    },
    "complexity": "medium",
    "components": [
      "decomposition",
      "feature_selection",
      "dimensionality_reduction"
    ],
    "template_name": "{domain}_{method}_feature"
  },
  {
    "name": "seasonal_signal_decomp",
    "category": "feature_extraction",
    "description": "Decompose seasonal signals into interpretable components",
    "parameters": {
      "signal_type": "seasonal",
      "decomposition_method": "ceemdan",
      "n_modes": 3,
      "noise_threshold": 0.1
    },
    "complexity": "medium",
    "components": [
      "signal_processing",
      "basis_functions",
      "component_analysis"
    ],
    "template_name": "{signal_type}_signal_decomp"
  },
  {
    "name": "quality_factor_exposure",
    "category": "financial_domain",
    "description": "Calculate exposure to quality factors with dynamic weighting",
    "parameters": {
      "factor_type": "quality",
      "weighting_scheme": "equal",
      "rebalancing_frequency": 1,
      "decay_factor": 0.99
    },
    "complexity": "medium",
    "components": [
      "factor_modeling",
      "risk_decomposition",
      "attribution_analysis"
    ],
    "template_name": "{factor_type}_factor_exposure"
  },
  {
    "name": "trend_signal_decomp",
    "category": "feature_extraction",
    "description": "Decompose trend signals into interpretable components",
    "parameters": {
      "signal_type": "trend",
      "decomposition_method": "ceemdan",
      "n_modes": 3,
      "noise_threshold": 0.1
    },
    "complexity": "medium",
    "components": [
      "signal_processing",
      "basis_functions",
      "component_analysis"
    ],
    "template_name": "{signal_type}_signal_decomp"
  },
  {
    "name": "attention_weighted_adaptive_norm",
    "category": "normalization",
    "description": "Adaptive normalization with attention_weighted adjustment mechanism",
    "parameters": {
      "adaptive_type": "attention_weighted",
      "adaptation_rate": 0.01,
      "context_window": 50
    },
    "complexity": "complex",
    "components": [
      "adaptive_scaling",
      "learned_parameters",
      "context_aware"
    ],
    "template_name": "{adaptive_type}_adaptive_norm"
  },
  {
    "name": "seasonal_signal_decomp",
    "category": "feature_extraction",
    "description": "Decompose seasonal signals into interpretable components",
    "parameters": {
      "signal_type": "seasonal",
      "decomposition_method": "ssa",
      "n_modes": 7,
      "noise_threshold": 0.01
    },
    "complexity": "medium",
    "components": [
      "signal_processing",
      "basis_functions",
      "component_analysis"
    ],
    "template_name": "{signal_type}_signal_decomp"
  },
  {
    "name": "graph_neural_cross_mixing",
    "category": "mixing",
    "description": "Cross-domain mixing using graph_neural architecture",
    "parameters": {
      "architecture": "graph_neural",
      "num_heads": 8,
      "mixing_layers": 4,
      "attention_type": "multiplicative"
    },
    "complexity": "complex",
    "components": [
      "cross_attention",
      "multi_head_interaction",
      "hierarchical_mixing"
    ],
    "template_name": "{architecture}_cross_mixing"
  },
  {
    "name": "volatility_clustering_stochastic",
    "category": "financial_domain",
    "description": "Analyze volatility_clustering using stochastic methodology",
    "parameters": {
      "market_property": "volatility_clustering",
      "analysis_type": "stochastic",
      "lookback_window": 50,
      "sensitivity": 2.0
    },
    "complexity": "complex",
    "components": [
      "market_microstructure",
      "price_dynamics",
      "risk_modeling"
    ],
    "template_name": "{market_property}_{analysis_type}"
  },
  {
    "name": "style_factor_exposure",
    "category": "financial_domain",
    "description": "Calculate exposure to style factors with dynamic weighting",
    "parameters": {
      "factor_type": "style",
      "weighting_scheme": "equal",
      "rebalancing_frequency": 5,
      "decay_factor": 0.99
    },
    "complexity": "medium",
    "components": [
      "factor_modeling",
      "risk_decomposition",
      "attribution_analysis"
    ],
    "template_name": "{factor_type}_factor_exposure"
  },
  {
    "name": "trend_state_space",
    "category": "temporal_processing",
    "description": "Process trend patterns using state_space methods",
    "parameters": {
      "temporal_pattern": "trend",
      "processing_type": "state_space",
      "model_order": 1,
      "smoothing_parameter": 0.1
    },
    "complexity": "complex",
    "components": [
      "temporal_modeling",
      "sequence_analysis",
      "time_series_decomposition"
    ],
    "template_name": "{temporal_pattern}_{processing_type}"
  },
  {
    "name": "mean_reversion_multiscale",
    "category": "financial_domain",
    "description": "Analyze mean_reversion using multiscale methodology",
    "parameters": {
      "market_property": "mean_reversion",
      "analysis_type": "multiscale",
      "lookback_window": 20,
      "sensitivity": 1.0
    },
    "complexity": "medium",
    "components": [
      "market_microstructure",
      "price_dynamics",
      "risk_modeling"
    ],
    "template_name": "{market_property}_{analysis_type}"
  },
  {
    "name": "jump_diffusion_stochastic",
    "category": "financial_domain",
    "description": "Analyze jump_diffusion using stochastic methodology",
    "parameters": {
      "market_property": "jump_diffusion",
      "analysis_type": "stochastic",
      "lookback_window": 50,
      "sensitivity": 2.0
    },
    "complexity": "medium",
    "components": [
      "market_microstructure",
      "price_dynamics",
      "risk_modeling"
    ],
    "template_name": "{market_property}_{analysis_type}"
  },
  {
    "name": "capsule_cross_mixing",
    "category": "mixing",
    "description": "Cross-domain mixing using capsule architecture",
    "parameters": {
      "architecture": "capsule",
      "num_heads": 4,
      "mixing_layers": 3,
      "attention_type": "scaled_dot"
    },
    "complexity": "complex",
    "components": [
      "cross_attention",
      "multi_head_interaction",
      "hierarchical_mixing"
    ],
    "template_name": "{architecture}_cross_mixing"
  },
  {
    "name": "technical_factor_exposure",
    "category": "financial_domain",
    "description": "Calculate exposure to technical factors with dynamic weighting",
    "parameters": {
      "factor_type": "technical",
      "weighting_scheme": "momentum",
      "rebalancing_frequency": 5,
      "decay_factor": 0.99
    },
    "complexity": "medium",
    "components": [
      "factor_modeling",
      "risk_decomposition",
      "attribution_analysis"
    ],
    "template_name": "{factor_type}_factor_exposure"
  },
  {
    "name": "wavelet_manifold_learning_feature",
    "category": "feature_extraction",
    "description": "Extract wavelet features using manifold_learning decomposition",
    "parameters": {
      "domain": "wavelet",
      "method": "manifold_learning",
      "n_components": 16,
      "sparsity_level": 0.3
    },
    "complexity": "complex",
    "components": [
      "decomposition",
      "feature_selection",
      "dimensionality_reduction"
    ],
    "template_name": "{domain}_{method}_feature"
  },
  {
    "name": "adaptive_temporal_norm",
    "category": "normalization",
    "description": "adaptive normalization applied to temporal for stabilization",
    "parameters": {
      "normalization_type": "adaptive",
      "scope": "temporal",
      "purpose": "stabilization"
    },
    "complexity": "medium",
    "components": [
      "normalization",
      "scaling",
      "centering"
    ],
    "template_name": "{normalization_type}_{scope}_norm"
  },
  {
    "name": "trend_hmm",
    "category": "temporal_processing",
    "description": "Process trend patterns using hmm methods",
    "parameters": {
      "temporal_pattern": "trend",
      "processing_type": "hmm",
      "model_order": 5,
      "smoothing_parameter": 0.3
    },
    "complexity": "medium",
    "components": [
      "temporal_modeling",
      "sequence_analysis",
      "time_series_decomposition"
    ],
    "template_name": "{temporal_pattern}_{processing_type}"
  },
  {
    "name": "sector_factor_exposure",
    "category": "financial_domain",
    "description": "Calculate exposure to sector factors with dynamic weighting",
    "parameters": {
      "factor_type": "sector",
      "weighting_scheme": "equal",
      "rebalancing_frequency": 1,
      "decay_factor": 0.95
    },
    "complexity": "medium",
    "components": [
      "factor_modeling",
      "risk_decomposition",
      "attribution_analysis"
    ],
    "template_name": "{factor_type}_factor_exposure"
  },
  {
    "name": "capsule_cross_mixing",
    "category": "mixing",
    "description": "Cross-domain mixing using capsule architecture",
    "parameters": {
      "architecture": "capsule",
      "num_heads": 4,
      "mixing_layers": 4,
      "attention_type": "multiplicative"
    },
    "complexity": "complex",
    "components": [
      "cross_attention",
      "multi_head_interaction",
      "hierarchical_mixing"
    ],
    "template_name": "{architecture}_cross_mixing"
  },
  {
    "name": "elastic_weights_regularizer",
    "category": "regularization",
    "description": "Apply elastic regularization to weights",
    "parameters": {
      "regularization_type": "elastic",
      "target": "weights",
      "regularization_strength": 1.0,
      "adaptation_rate": 0.01
    },
    "complexity": "complex",
    "components": [
      "regularization",
      "constraint_enforcement",
      "penalty_application"
    ],
    "template_name": "{regularization_type}_{target}_regularizer"
  },
  {
    "name": "cyclical_signal_decomp",
    "category": "feature_extraction",
    "description": "Decompose cyclical signals into interpretable components",
    "parameters": {
      "signal_type": "cyclical",
      "decomposition_method": "vmd",
      "n_modes": 10,
      "noise_threshold": 0.01
    },
    "complexity": "medium",
    "components": [
      "signal_processing",
      "basis_functions",
      "component_analysis"
    ],
    "template_name": "{signal_type}_signal_decomp"
  },
  {
    "name": "macro_factor_exposure",
    "category": "financial_domain",
    "description": "Calculate exposure to macro factors with dynamic weighting",
    "parameters": {
      "factor_type": "macro",
      "weighting_scheme": "momentum",
      "rebalancing_frequency": 5,
      "decay_factor": 0.95
    },
    "complexity": "complex",
    "components": [
      "factor_modeling",
      "risk_decomposition",
      "attribution_analysis"
    ],
    "template_name": "{factor_type}_factor_exposure"
  },
  {
    "name": "quality_factor_exposure",
    "category": "financial_domain",
    "description": "Calculate exposure to quality factors with dynamic weighting",
    "parameters": {
      "factor_type": "quality",
      "weighting_scheme": "risk_parity",
      "rebalancing_frequency": 1,
      "decay_factor": 0.95
    },
    "complexity": "complex",
    "components": [
      "factor_modeling",
      "risk_decomposition",
      "attribution_analysis"
    ],
    "template_name": "{factor_type}_factor_exposure"
  },
  {
    "name": "convolution_multi_scale_mixing",
    "category": "mixing",
    "description": "Mix information across multi_scale using convolution mechanism",
    "parameters": {
      "mixing_type": "convolution",
      "domain": "multi_scale",
      "mixing_ratio": 0.8,
      "interaction_depth": 2
    },
    "complexity": "medium",
    "components": [
      "information_mixing",
      "cross_connections",
      "feature_interaction"
    ],
    "template_name": "{mixing_type}_{domain}_mixing"
  },
  {
    "name": "robust_cross_sectional_norm",
    "category": "normalization",
    "description": "robust normalization applied to cross_sectional for regularization",
    "parameters": {
      "normalization_type": "robust",
      "scope": "cross_sectional",
      "purpose": "regularization"
    },
    "complexity": "medium",
    "components": [
      "normalization",
      "scaling",
      "centering"
    ],
    "template_name": "{normalization_type}_{scope}_norm"
  },
  {
    "name": "quantile_temporal_norm",
    "category": "normalization",
    "description": "quantile normalization applied to temporal for feature_enhancement",
    "parameters": {
      "normalization_type": "quantile",
      "scope": "temporal",
      "purpose": "feature_enhancement"
    },
    "complexity": "simple",
    "components": [
      "normalization",
      "scaling",
      "centering"
    ],
    "template_name": "{normalization_type}_{scope}_norm"
  },
  {
    "name": "regime_switching_stochastic",
    "category": "financial_domain",
    "description": "Analyze regime_switching using stochastic methodology",
    "parameters": {
      "market_property": "regime_switching",
      "analysis_type": "stochastic",
      "lookback_window": 100,
      "sensitivity": 0.1
    },
    "complexity": "medium",
    "components": [
      "market_microstructure",
      "price_dynamics",
      "risk_modeling"
    ],
    "template_name": "{market_property}_{analysis_type}"
  },
  {
    "name": "global_temporal_attention",
    "category": "attention",
    "description": "global attention mechanism for temporal modeling",
    "parameters": {
      "attention_type": "global",
      "scope": "temporal",
      "num_heads": 4,
      "attention_dropout": 0.3
    },
    "complexity": "medium",
    "components": [
      "attention_weights",
      "key_value_query",
      "attention_pooling"
    ],
    "template_name": "{attention_type}_{scope}_attention"
  },
  {
    "name": "elastic_activations_regularizer",
    "category": "regularization",
    "description": "Apply elastic regularization to activations",
    "parameters": {
      "regularization_type": "elastic",
      "target": "activations",
      "regularization_strength": 1.0,
      "adaptation_rate": 0.5
    },
    "complexity": "medium",
    "components": [
      "regularization",
      "constraint_enforcement",
      "penalty_application"
    ],
    "template_name": "{regularization_type}_{target}_regularizer"
  },
  {
    "name": "volatility_signal_decomp",
    "category": "feature_extraction",
    "description": "Decompose volatility signals into interpretable components",
    "parameters": {
      "signal_type": "volatility",
      "decomposition_method": "emd",
      "n_modes": 3,
      "noise_threshold": 0.01
    },
    "complexity": "complex",
    "components": [
      "signal_processing",
      "basis_functions",
      "component_analysis"
    ],
    "template_name": "{signal_type}_signal_decomp"
  },
  {
    "name": "momentum_adjusted_adaptive_norm",
    "category": "normalization",
    "description": "Adaptive normalization with momentum_adjusted adjustment mechanism",
    "parameters": {
      "adaptive_type": "momentum_adjusted",
      "adaptation_rate": 0.2,
      "context_window": 10
    },
    "complexity": "complex",
    "components": [
      "adaptive_scaling",
      "learned_parameters",
      "context_aware"
    ],
    "template_name": "{adaptive_type}_adaptive_norm"
  },
  {
    "name": "trend_state_space",
    "category": "temporal_processing",
    "description": "Process trend patterns using state_space methods",
    "parameters": {
      "temporal_pattern": "trend",
      "processing_type": "state_space",
      "model_order": 5,
      "smoothing_parameter": 0.3
    },
    "complexity": "medium",
    "components": [
      "temporal_modeling",
      "sequence_analysis",
      "time_series_decomposition"
    ],
    "template_name": "{temporal_pattern}_{processing_type}"
  },
  {
    "name": "geometric_sparse_coding_feature",
    "category": "feature_extraction",
    "description": "Extract geometric features using sparse_coding decomposition",
    "parameters": {
      "domain": "geometric",
      "method": "sparse_coding",
      "n_components": 16,
      "sparsity_level": 0.3
    },
    "complexity": "complex",
    "components": [
      "decomposition",
      "feature_selection",
      "dimensionality_reduction"
    ],
    "template_name": "{domain}_{method}_feature"
  },
  {
    "name": "global_multi_scale_attention",
    "category": "attention",
    "description": "global attention mechanism for multi_scale modeling",
    "parameters": {
      "attention_type": "global",
      "scope": "multi_scale",
      "num_heads": 16,
      "attention_dropout": 0.1
    },
    "complexity": "complex",
    "components": [
      "attention_weights",
      "key_value_query",
      "attention_pooling"
    ],
    "template_name": "{attention_type}_{scope}_attention"
  },
  {
    "name": "jump_diffusion_fractal",
    "category": "financial_domain",
    "description": "Analyze jump_diffusion using fractal methodology",
    "parameters": {
      "market_property": "jump_diffusion",
      "analysis_type": "fractal",
      "lookback_window": 20,
      "sensitivity": 0.5
    },
    "complexity": "complex",
    "components": [
      "market_microstructure",
      "price_dynamics",
      "risk_modeling"
    ],
    "template_name": "{market_property}_{analysis_type}"
  },
  {
    "name": "geometric_dictionary_learning_feature",
    "category": "feature_extraction",
    "description": "Extract geometric features using dictionary_learning decomposition",
    "parameters": {
      "domain": "geometric",
      "method": "dictionary_learning",
      "n_components": 16,
      "sparsity_level": 0.7
    },
    "complexity": "complex",
    "components": [
      "decomposition",
      "feature_selection",
      "dimensionality_reduction"
    ],
    "template_name": "{domain}_{method}_feature"
  },
  {
    "name": "capsule_cross_mixing",
    "category": "mixing",
    "description": "Cross-domain mixing using capsule architecture",
    "parameters": {
      "architecture": "capsule",
      "num_heads": 4,
      "mixing_layers": 3,
      "attention_type": "additive"
    },
    "complexity": "complex",
    "components": [
      "cross_attention",
      "multi_head_interaction",
      "hierarchical_mixing"
    ],
    "template_name": "{architecture}_cross_mixing"
  },
  {
    "name": "nuclear_activations_regularizer",
    "category": "regularization",
    "description": "Apply nuclear regularization to activations",
    "parameters": {
      "regularization_type": "nuclear",
      "target": "activations",
      "regularization_strength": 0.1,
      "adaptation_rate": 0.01
    },
    "complexity": "medium",
    "components": [
      "regularization",
      "constraint_enforcement",
      "penalty_application"
    ],
    "template_name": "{regularization_type}_{target}_regularizer"
  },
  {
    "name": "running_spatial_norm",
    "category": "normalization",
    "description": "running normalization applied to spatial for stabilization",
    "parameters": {
      "normalization_type": "running",
      "scope": "spatial",
      "purpose": "stabilization"
    },
    "complexity": "simple",
    "components": [
      "normalization",
      "scaling",
      "centering"
    ],
    "template_name": "{normalization_type}_{scope}_norm"
  },
  {
    "name": "convolution_temporal_mixing",
    "category": "mixing",
    "description": "Mix information across temporal using convolution mechanism",
    "parameters": {
      "mixing_type": "convolution",
      "domain": "temporal",
      "mixing_ratio": 0.8,
      "interaction_depth": 2
    },
    "complexity": "medium",
    "components": [
      "information_mixing",
      "cross_connections",
      "feature_interaction"
    ],
    "template_name": "{mixing_type}_{domain}_mixing"
  },
  {
    "name": "noise_signal_decomp",
    "category": "feature_extraction",
    "description": "Decompose noise signals into interpretable components",
    "parameters": {
      "signal_type": "noise",
      "decomposition_method": "eemd",
      "n_modes": 10,
      "noise_threshold": 0.1
    },
    "complexity": "medium",
    "components": [
      "signal_processing",
      "basis_functions",
      "component_analysis"
    ],
    "template_name": "{signal_type}_signal_decomp"
  },
  {
    "name": "adaptive_features_regularizer",
    "category": "regularization",
    "description": "Apply adaptive regularization to features",
    "parameters": {
      "regularization_type": "adaptive",
      "target": "features",
      "regularization_strength": 0.01,
      "adaptation_rate": 0.5
    },
    "complexity": "medium",
    "components": [
      "regularization",
      "constraint_enforcement",
      "penalty_application"
    ],
    "template_name": "{regularization_type}_{target}_regularizer"
  },
  {
    "name": "sector_factor_exposure",
    "category": "financial_domain",
    "description": "Calculate exposure to sector factors with dynamic weighting",
    "parameters": {
      "factor_type": "sector",
      "weighting_scheme": "equal",
      "rebalancing_frequency": 10,
      "decay_factor": 0.95
    },
    "complexity": "medium",
    "components": [
      "factor_modeling",
      "risk_decomposition",
      "attribution_analysis"
    ],
    "template_name": "{factor_type}_factor_exposure"
  },
  {
    "name": "regime_switching_stochastic",
    "category": "financial_domain",
    "description": "Analyze regime_switching using stochastic methodology",
    "parameters": {
      "market_property": "regime_switching",
      "analysis_type": "stochastic",
      "lookback_window": 5,
      "sensitivity": 2.0
    },
    "complexity": "complex",
    "components": [
      "market_microstructure",
      "price_dynamics",
      "risk_modeling"
    ],
    "template_name": "{market_property}_{analysis_type}"
  },
  {
    "name": "local_multi_scale_attention",
    "category": "attention",
    "description": "local attention mechanism for multi_scale modeling",
    "parameters": {
      "attention_type": "local",
      "scope": "multi_scale",
      "num_heads": 4,
      "attention_dropout": 0.1
    },
    "complexity": "complex",
    "components": [
      "attention_weights",
      "key_value_query",
      "attention_pooling"
    ],
    "template_name": "{attention_type}_{scope}_attention"
  },
  {
    "name": "gated_multi_scale_mixing",
    "category": "mixing",
    "description": "Mix information across multi_scale using gated mechanism",
    "parameters": {
      "mixing_type": "gated",
      "domain": "multi_scale",
      "mixing_ratio": 0.5,
      "interaction_depth": 2
    },
    "complexity": "simple",
    "components": [
      "information_mixing",
      "cross_connections",
      "feature_interaction"
    ],
    "template_name": "{mixing_type}_{domain}_mixing"
  },
  {
    "name": "robust_cross_sectional_norm",
    "category": "normalization",
    "description": "robust normalization applied to cross_sectional for feature_enhancement",
    "parameters": {
      "normalization_type": "robust",
      "scope": "cross_sectional",
      "purpose": "feature_enhancement"
    },
    "complexity": "medium",
    "components": [
      "normalization",
      "scaling",
      "centering"
    ],
    "template_name": "{normalization_type}_{scope}_norm"
  },
  {
    "name": "quantile_feature_norm",
    "category": "normalization",
    "description": "quantile normalization applied to feature for regularization",
    "parameters": {
      "normalization_type": "quantile",
      "scope": "feature",
      "purpose": "regularization"
    },
    "complexity": "medium",
    "components": [
      "normalization",
      "scaling",
      "centering"
    ],
    "template_name": "{normalization_type}_{scope}_norm"
  },
  {
    "name": "jump_diffusion_spectral",
    "category": "financial_domain",
    "description": "Analyze jump_diffusion using spectral methodology",
    "parameters": {
      "market_property": "jump_diffusion",
      "analysis_type": "spectral",
      "lookback_window": 50,
      "sensitivity": 1.0
    },
    "complexity": "simple",
    "components": [
      "market_microstructure",
      "price_dynamics",
      "risk_modeling"
    ],
    "template_name": "{market_property}_{analysis_type}"
  },
  {
    "name": "spectral_sparse_coding_feature",
    "category": "feature_extraction",
    "description": "Extract spectral features using sparse_coding decomposition",
    "parameters": {
      "domain": "spectral",
      "method": "sparse_coding",
      "n_components": 16,
      "sparsity_level": 0.1
    },
    "complexity": "medium",
    "components": [
      "decomposition",
      "feature_selection",
      "dimensionality_reduction"
    ],
    "template_name": "{domain}_{method}_feature"
  },
  {
    "name": "trend_hmm",
    "category": "temporal_processing",
    "description": "Process trend patterns using hmm methods",
    "parameters": {
      "temporal_pattern": "trend",
      "processing_type": "hmm",
      "model_order": 2,
      "smoothing_parameter": 0.5
    },
    "complexity": "complex",
    "components": [
      "temporal_modeling",
      "sequence_analysis",
      "time_series_decomposition"
    ],
    "template_name": "{temporal_pattern}_{processing_type}"
  },
  {
    "name": "style_factor_exposure",
    "category": "financial_domain",
    "description": "Calculate exposure to style factors with dynamic weighting",
    "parameters": {
      "factor_type": "style",
      "weighting_scheme": "equal",
      "rebalancing_frequency": 10,
      "decay_factor": 0.99
    },
    "complexity": "simple",
    "components": [
      "factor_modeling",
      "risk_decomposition",
      "attribution_analysis"
    ],
    "template_name": "{factor_type}_factor_exposure"
  },
  {
    "name": "graph_neural_cross_mixing",
    "category": "mixing",
    "description": "Cross-domain mixing using graph_neural architecture",
    "parameters": {
      "architecture": "graph_neural",
      "num_heads": 8,
      "mixing_layers": 3,
      "attention_type": "additive"
    },
    "complexity": "complex",
    "components": [
      "cross_attention",
      "multi_head_interaction",
      "hierarchical_mixing"
    ],
    "template_name": "{architecture}_cross_mixing"
  },
  {
    "name": "tensor_network_cross_mixing",
    "category": "mixing",
    "description": "Cross-domain mixing using tensor_network architecture",
    "parameters": {
      "architecture": "tensor_network",
      "num_heads": 8,
      "mixing_layers": 4,
      "attention_type": "additive"
    },
    "complexity": "simple",
    "components": [
      "cross_attention",
      "multi_head_interaction",
      "hierarchical_mixing"
    ],
    "template_name": "{architecture}_cross_mixing"
  },
  {
    "name": "structural_break_kalman_filter",
    "category": "temporal_processing",
    "description": "Process structural_break patterns using kalman_filter methods",
    "parameters": {
      "temporal_pattern": "structural_break",
      "processing_type": "kalman_filter",
      "model_order": 1,
      "smoothing_parameter": 0.7
    },
    "complexity": "complex",
    "components": [
      "temporal_modeling",
      "sequence_analysis",
      "time_series_decomposition"
    ],
    "template_name": "{temporal_pattern}_{processing_type}"
  },
  {
    "name": "style_factor_exposure",
    "category": "financial_domain",
    "description": "Calculate exposure to style factors with dynamic weighting",
    "parameters": {
      "factor_type": "style",
      "weighting_scheme": "volatility",
      "rebalancing_frequency": 20,
      "decay_factor": 0.99
    },
    "complexity": "complex",
    "components": [
      "factor_modeling",
      "risk_decomposition",
      "attribution_analysis"
    ],
    "template_name": "{factor_type}_factor_exposure"
  },
  {
    "name": "spectral_spatial_norm",
    "category": "normalization",
    "description": "spectral normalization applied to spatial for feature_enhancement",
    "parameters": {
      "normalization_type": "spectral",
      "scope": "spatial",
      "purpose": "feature_enhancement"
    },
    "complexity": "medium",
    "components": [
      "normalization",
      "scaling",
      "centering"
    ],
    "template_name": "{normalization_type}_{scope}_norm"
  },
  {
    "name": "jump_diffusion_spectral",
    "category": "financial_domain",
    "description": "Analyze jump_diffusion using spectral methodology",
    "parameters": {
      "market_property": "jump_diffusion",
      "analysis_type": "spectral",
      "lookback_window": 5,
      "sensitivity": 2.0
    },
    "complexity": "complex",
    "components": [
      "market_microstructure",
      "price_dynamics",
      "risk_modeling"
    ],
    "template_name": "{market_property}_{analysis_type}"
  },
  {
    "name": "global_temporal_attention",
    "category": "attention",
    "description": "global attention mechanism for temporal modeling",
    "parameters": {
      "attention_type": "global",
      "scope": "temporal",
      "num_heads": 4,
      "attention_dropout": 0.2
    },
    "complexity": "medium",
    "components": [
      "attention_weights",
      "key_value_query",
      "attention_pooling"
    ],
    "template_name": "{attention_type}_{scope}_attention"
  },
  {
    "name": "multi_head_temporal_attention",
    "category": "attention",
    "description": "multi_head attention mechanism for temporal modeling",
    "parameters": {
      "attention_type": "multi_head",
      "scope": "temporal",
      "num_heads": 8,
      "attention_dropout": 0.3
    },
    "complexity": "medium",
    "components": [
      "attention_weights",
      "key_value_query",
      "attention_pooling"
    ],
    "template_name": "{attention_type}_{scope}_attention"
  },
  {
    "name": "transformer_cross_mixing",
    "category": "mixing",
    "description": "Cross-domain mixing using transformer architecture",
    "parameters": {
      "architecture": "transformer",
      "num_heads": 4,
      "mixing_layers": 4,
      "attention_type": "scaled_dot"
    },
    "complexity": "complex",
    "components": [
      "cross_attention",
      "multi_head_interaction",
      "hierarchical_mixing"
    ],
    "template_name": "{architecture}_cross_mixing"
  },
  {
    "name": "mean_reversion_multiscale",
    "category": "financial_domain",
    "description": "Analyze mean_reversion using multiscale methodology",
    "parameters": {
      "market_property": "mean_reversion",
      "analysis_type": "multiscale",
      "lookback_window": 10,
      "sensitivity": 2.0
    },
    "complexity": "medium",
    "components": [
      "market_microstructure",
      "price_dynamics",
      "risk_modeling"
    ],
    "template_name": "{market_property}_{analysis_type}"
  },
  {
    "name": "trend_signal_decomp",
    "category": "feature_extraction",
    "description": "Decompose trend signals into interpretable components",
    "parameters": {
      "signal_type": "trend",
      "decomposition_method": "eemd",
      "n_modes": 5,
      "noise_threshold": 0.01
    },
    "complexity": "medium",
    "components": [
      "signal_processing",
      "basis_functions",
      "component_analysis"
    ],
    "template_name": "{signal_type}_signal_decomp"
  },
  {
    "name": "volatility_signal_decomp",
    "category": "feature_extraction",
    "description": "Decompose volatility signals into interpretable components",
    "parameters": {
      "signal_type": "volatility",
      "decomposition_method": "ceemdan",
      "n_modes": 10,
      "noise_threshold": 0.1
    },
    "complexity": "simple",
    "components": [
      "signal_processing",
      "basis_functions",
      "component_analysis"
    ],
    "template_name": "{signal_type}_signal_decomp"
  },
  {
    "name": "exponential_channel_norm",
    "category": "normalization",
    "description": "exponential normalization applied to channel for regularization",
    "parameters": {
      "normalization_type": "exponential",
      "scope": "channel",
      "purpose": "regularization"
    },
    "complexity": "medium",
    "components": [
      "normalization",
      "scaling",
      "centering"
    ],
    "template_name": "{normalization_type}_{scope}_norm"
  },
  {
    "name": "seasonal_state_space",
    "category": "temporal_processing",
    "description": "Process seasonal patterns using state_space methods",
    "parameters": {
      "temporal_pattern": "seasonal",
      "processing_type": "state_space",
      "model_order": 1,
      "smoothing_parameter": 0.1
    },
    "complexity": "medium",
    "components": [
      "temporal_modeling",
      "sequence_analysis",
      "time_series_decomposition"
    ],
    "template_name": "{temporal_pattern}_{processing_type}"
  },
  {
    "name": "statistical_dictionary_learning_feature",
    "category": "feature_extraction",
    "description": "Extract statistical features using dictionary_learning decomposition",
    "parameters": {
      "domain": "statistical",
      "method": "dictionary_learning",
      "n_components": 64,
      "sparsity_level": 0.3
    },
    "complexity": "medium",
    "components": [
      "decomposition",
      "feature_selection",
      "dimensionality_reduction"
    ],
    "template_name": "{domain}_{method}_feature"
  },
  {
    "name": "noise_signal_decomp",
    "category": "feature_extraction",
    "description": "Decompose noise signals into interpretable components",
    "parameters": {
      "signal_type": "noise",
      "decomposition_method": "vmd",
      "n_modes": 7,
      "noise_threshold": 0.01
    },
    "complexity": "medium",
    "components": [
      "signal_processing",
      "basis_functions",
      "component_analysis"
    ],
    "template_name": "{signal_type}_signal_decomp"
  },
  {
    "name": "volatility_clustering_spectral",
    "category": "financial_domain",
    "description": "Analyze volatility_clustering using spectral methodology",
    "parameters": {
      "market_property": "volatility_clustering",
      "analysis_type": "spectral",
      "lookback_window": 50,
      "sensitivity": 0.5
    },
    "complexity": "simple",
    "components": [
      "market_microstructure",
      "price_dynamics",
      "risk_modeling"
    ],
    "template_name": "{market_property}_{analysis_type}"
  },
  {
    "name": "sector_factor_exposure",
    "category": "financial_domain",
    "description": "Calculate exposure to sector factors with dynamic weighting",
    "parameters": {
      "factor_type": "sector",
      "weighting_scheme": "momentum",
      "rebalancing_frequency": 10,
      "decay_factor": 0.9
    },
    "complexity": "complex",
    "components": [
      "factor_modeling",
      "risk_decomposition",
      "attribution_analysis"
    ],
    "template_name": "{factor_type}_factor_exposure"
  },
  {
    "name": "volatility_clustering_fractal",
    "category": "financial_domain",
    "description": "Analyze volatility_clustering using fractal methodology",
    "parameters": {
      "market_property": "volatility_clustering",
      "analysis_type": "fractal",
      "lookback_window": 5,
      "sensitivity": 1.0
    },
    "complexity": "medium",
    "components": [
      "market_microstructure",
      "price_dynamics",
      "risk_modeling"
    ],
    "template_name": "{market_property}_{analysis_type}"
  },
  {
    "name": "momentum_multiscale",
    "category": "financial_domain",
    "description": "Analyze momentum using multiscale methodology",
    "parameters": {
      "market_property": "momentum",
      "analysis_type": "multiscale",
      "lookback_window": 5,
      "sensitivity": 0.1
    },
    "complexity": "complex",
    "components": [
      "market_microstructure",
      "price_dynamics",
      "risk_modeling"
    ],
    "template_name": "{market_property}_{analysis_type}"
  },
  {
    "name": "volatility_clustering_spectral",
    "category": "financial_domain",
    "description": "Analyze volatility_clustering using spectral methodology",
    "parameters": {
      "market_property": "volatility_clustering",
      "analysis_type": "spectral",
      "lookback_window": 100,
      "sensitivity": 1.0
    },
    "complexity": "complex",
    "components": [
      "market_microstructure",
      "price_dynamics",
      "risk_modeling"
    ],
    "template_name": "{market_property}_{analysis_type}"
  },
  {
    "name": "spectral_feature_mixing",
    "category": "mixing",
    "description": "Mix information across feature using spectral mechanism",
    "parameters": {
      "mixing_type": "spectral",
      "domain": "feature",
      "mixing_ratio": 0.8,
      "interaction_depth": 3
    },
    "complexity": "medium",
    "components": [
      "information_mixing",
      "cross_connections",
      "feature_interaction"
    ],
    "template_name": "{mixing_type}_{domain}_mixing"
  },
  {
    "name": "irregular_hmm",
    "category": "temporal_processing",
    "description": "Process irregular patterns using hmm methods",
    "parameters": {
      "temporal_pattern": "irregular",
      "processing_type": "hmm",
      "model_order": 5,
      "smoothing_parameter": 0.3
    },
    "complexity": "medium",
    "components": [
      "temporal_modeling",
      "sequence_analysis",
      "time_series_decomposition"
    ],
    "template_name": "{temporal_pattern}_{processing_type}"
  },
  {
    "name": "statistical_basis_pursuit_feature",
    "category": "feature_extraction",
    "description": "Extract statistical features using basis_pursuit decomposition",
    "parameters": {
      "domain": "statistical",
      "method": "basis_pursuit",
      "n_components": 64,
      "sparsity_level": 0.5
    },
    "complexity": "complex",
    "components": [
      "decomposition",
      "feature_selection",
      "dimensionality_reduction"
    ],
    "template_name": "{domain}_{method}_feature"
  },
  {
    "name": "seasonal_state_space",
    "category": "temporal_processing",
    "description": "Process seasonal patterns using state_space methods",
    "parameters": {
      "temporal_pattern": "seasonal",
      "processing_type": "state_space",
      "model_order": 2,
      "smoothing_parameter": 0.5
    },
    "complexity": "medium",
    "components": [
      "temporal_modeling",
      "sequence_analysis",
      "time_series_decomposition"
    ],
    "template_name": "{temporal_pattern}_{processing_type}"
  },
  {
    "name": "adaptive_feature_attention",
    "category": "attention",
    "description": "adaptive attention mechanism for feature modeling",
    "parameters": {
      "attention_type": "adaptive",
      "scope": "feature",
      "num_heads": 16,
      "attention_dropout": 0.2
    },
    "complexity": "medium",
    "components": [
      "attention_weights",
      "key_value_query",
      "attention_pooling"
    ],
    "template_name": "{attention_type}_{scope}_attention"
  },
  {
    "name": "style_factor_exposure",
    "category": "financial_domain",
    "description": "Calculate exposure to style factors with dynamic weighting",
    "parameters": {
      "factor_type": "style",
      "weighting_scheme": "equal",
      "rebalancing_frequency": 1,
      "decay_factor": 0.99
    },
    "complexity": "complex",
    "components": [
      "factor_modeling",
      "risk_decomposition",
      "attribution_analysis"
    ],
    "template_name": "{factor_type}_factor_exposure"
  },
  {
    "name": "local_cross_sectional_attention",
    "category": "attention",
    "description": "local attention mechanism for cross_sectional modeling",
    "parameters": {
      "attention_type": "local",
      "scope": "cross_sectional",
      "num_heads": 32,
      "attention_dropout": 0.2
    },
    "complexity": "medium",
    "components": [
      "attention_weights",
      "key_value_query",
      "attention_pooling"
    ],
    "template_name": "{attention_type}_{scope}_attention"
  },
  {
    "name": "structural_break_hmm",
    "category": "temporal_processing",
    "description": "Process structural_break patterns using hmm methods",
    "parameters": {
      "temporal_pattern": "structural_break",
      "processing_type": "hmm",
      "model_order": 2,
      "smoothing_parameter": 0.5
    },
    "complexity": "complex",
    "components": [
      "temporal_modeling",
      "sequence_analysis",
      "time_series_decomposition"
    ],
    "template_name": "{temporal_pattern}_{processing_type}"
  },
  {
    "name": "hierarchical_temporal_attention",
    "category": "attention",
    "description": "hierarchical attention mechanism for temporal modeling",
    "parameters": {
      "attention_type": "hierarchical",
      "scope": "temporal",
      "num_heads": 16,
      "attention_dropout": 0.3
    },
    "complexity": "complex",
    "components": [
      "attention_weights",
      "key_value_query",
      "attention_pooling"
    ],
    "template_name": "{attention_type}_{scope}_attention"
  },
  {
    "name": "sector_factor_exposure",
    "category": "financial_domain",
    "description": "Calculate exposure to sector factors with dynamic weighting",
    "parameters": {
      "factor_type": "sector",
      "weighting_scheme": "risk_parity",
      "rebalancing_frequency": 20,
      "decay_factor": 0.99
    },
    "complexity": "complex",
    "components": [
      "factor_modeling",
      "risk_decomposition",
      "attribution_analysis"
    ],
    "template_name": "{factor_type}_factor_exposure"
  },
  {
    "name": "nuclear_features_regularizer",
    "category": "regularization",
    "description": "Apply nuclear regularization to features",
    "parameters": {
      "regularization_type": "nuclear",
      "target": "features",
      "regularization_strength": 0.01,
      "adaptation_rate": 0.01
    },
    "complexity": "complex",
    "components": [
      "regularization",
      "constraint_enforcement",
      "penalty_application"
    ],
    "template_name": "{regularization_type}_{target}_regularizer"
  },
  {
    "name": "geometric_sparse_coding_feature",
    "category": "feature_extraction",
    "description": "Extract geometric features using sparse_coding decomposition",
    "parameters": {
      "domain": "geometric",
      "method": "sparse_coding",
      "n_components": 128,
      "sparsity_level": 0.1
    },
    "complexity": "medium",
    "components": [
      "decomposition",
      "feature_selection",
      "dimensionality_reduction"
    ],
    "template_name": "{domain}_{method}_feature"
  },
  {
    "name": "graph_multi_scale_mixing",
    "category": "mixing",
    "description": "Mix information across multi_scale using graph mechanism",
    "parameters": {
      "mixing_type": "graph",
      "domain": "multi_scale",
      "mixing_ratio": 0.5,
      "interaction_depth": 1
    },
    "complexity": "medium",
    "components": [
      "information_mixing",
      "cross_connections",
      "feature_interaction"
    ],
    "template_name": "{mixing_type}_{domain}_mixing"
  },
  {
    "name": "running_feature_norm",
    "category": "normalization",
    "description": "running normalization applied to feature for regularization",
    "parameters": {
      "normalization_type": "running",
      "scope": "feature",
      "purpose": "regularization"
    },
    "complexity": "medium",
    "components": [
      "normalization",
      "scaling",
      "centering"
    ],
    "template_name": "{normalization_type}_{scope}_norm"
  },
  {
    "name": "seasonal_kalman_filter",
    "category": "temporal_processing",
    "description": "Process seasonal patterns using kalman_filter methods",
    "parameters": {
      "temporal_pattern": "seasonal",
      "processing_type": "kalman_filter",
      "model_order": 1,
      "smoothing_parameter": 0.1
    },
    "complexity": "complex",
    "components": [
      "temporal_modeling",
      "sequence_analysis",
      "time_series_decomposition"
    ],
    "template_name": "{temporal_pattern}_{processing_type}"
  },
  {
    "name": "group_gradients_regularizer",
    "category": "regularization",
    "description": "Apply group regularization to gradients",
    "parameters": {
      "regularization_type": "group",
      "target": "gradients",
      "regularization_strength": 1.0,
      "adaptation_rate": 0.01
    },
    "complexity": "medium",
    "components": [
      "regularization",
      "constraint_enforcement",
      "penalty_application"
    ],
    "template_name": "{regularization_type}_{target}_regularizer"
  },
  {
    "name": "technical_factor_exposure",
    "category": "financial_domain",
    "description": "Calculate exposure to technical factors with dynamic weighting",
    "parameters": {
      "factor_type": "technical",
      "weighting_scheme": "momentum",
      "rebalancing_frequency": 10,
      "decay_factor": 0.9
    },
    "complexity": "simple",
    "components": [
      "factor_modeling",
      "risk_decomposition",
      "attribution_analysis"
    ],
    "template_name": "{factor_type}_factor_exposure"
  },
  {
    "name": "volatility_clustering_spectral",
    "category": "financial_domain",
    "description": "Analyze volatility_clustering using spectral methodology",
    "parameters": {
      "market_property": "volatility_clustering",
      "analysis_type": "spectral",
      "lookback_window": 100,
      "sensitivity": 0.1
    },
    "complexity": "medium",
    "components": [
      "market_microstructure",
      "price_dynamics",
      "risk_modeling"
    ],
    "template_name": "{market_property}_{analysis_type}"
  },
  {
    "name": "attention_feature_mixing",
    "category": "mixing",
    "description": "Mix information across feature using attention mechanism",
    "parameters": {
      "mixing_type": "attention",
      "domain": "feature",
      "mixing_ratio": 0.2,
      "interaction_depth": 2
    },
    "complexity": "medium",
    "components": [
      "information_mixing",
      "cross_connections",
      "feature_interaction"
    ],
    "template_name": "{mixing_type}_{domain}_mixing"
  },
  {
    "name": "group_gradients_regularizer",
    "category": "regularization",
    "description": "Apply group regularization to gradients",
    "parameters": {
      "regularization_type": "group",
      "target": "gradients",
      "regularization_strength": 1.0,
      "adaptation_rate": 0.01
    },
    "complexity": "complex",
    "components": [
      "regularization",
      "constraint_enforcement",
      "penalty_application"
    ],
    "template_name": "{regularization_type}_{target}_regularizer"
  },
  {
    "name": "sector_factor_exposure",
    "category": "financial_domain",
    "description": "Calculate exposure to sector factors with dynamic weighting",
    "parameters": {
      "factor_type": "sector",
      "weighting_scheme": "equal",
      "rebalancing_frequency": 20,
      "decay_factor": 0.95
    },
    "complexity": "complex",
    "components": [
      "factor_modeling",
      "risk_decomposition",
      "attribution_analysis"
    ],
    "template_name": "{factor_type}_factor_exposure"
  },
  {
    "name": "volatility_clustering_multiscale",
    "category": "financial_domain",
    "description": "Analyze volatility_clustering using multiscale methodology",
    "parameters": {
      "market_property": "volatility_clustering",
      "analysis_type": "multiscale",
      "lookback_window": 20,
      "sensitivity": 1.0
    },
    "complexity": "medium",
    "components": [
      "market_microstructure",
      "price_dynamics",
      "risk_modeling"
    ],
    "template_name": "{market_property}_{analysis_type}"
  },
  {
    "name": "volatility_signal_decomp",
    "category": "feature_extraction",
    "description": "Decompose volatility signals into interpretable components",
    "parameters": {
      "signal_type": "volatility",
      "decomposition_method": "ssa",
      "n_modes": 7,
      "noise_threshold": 0.1
    },
    "complexity": "medium",
    "components": [
      "signal_processing",
      "basis_functions",
      "component_analysis"
    ],
    "template_name": "{signal_type}_signal_decomp"
  },
  {
    "name": "statistical_basis_pursuit_feature",
    "category": "feature_extraction",
    "description": "Extract statistical features using basis_pursuit decomposition",
    "parameters": {
      "domain": "statistical",
      "method": "basis_pursuit",
      "n_components": 8,
      "sparsity_level": 0.3
    },
    "complexity": "complex",
    "components": [
      "decomposition",
      "feature_selection",
      "dimensionality_reduction"
    ],
    "template_name": "{domain}_{method}_feature"
  },
  {
    "name": "spectral_cross_sectional_mixing",
    "category": "mixing",
    "description": "Mix information across cross_sectional using spectral mechanism",
    "parameters": {
      "mixing_type": "spectral",
      "domain": "cross_sectional",
      "mixing_ratio": 0.2,
      "interaction_depth": 1
    },
    "complexity": "medium",
    "components": [
      "information_mixing",
      "cross_connections",
      "feature_interaction"
    ],
    "template_name": "{mixing_type}_{domain}_mixing"
  },
  {
    "name": "geometric_sparse_coding_feature",
    "category": "feature_extraction",
    "description": "Extract geometric features using sparse_coding decomposition",
    "parameters": {
      "domain": "geometric",
      "method": "sparse_coding",
      "n_components": 16,
      "sparsity_level": 0.7
    },
    "complexity": "simple",
    "components": [
      "decomposition",
      "feature_selection",
      "dimensionality_reduction"
    ],
    "template_name": "{domain}_{method}_feature"
  },
  {
    "name": "graph_feature_mixing",
    "category": "mixing",
    "description": "Mix information across feature using graph mechanism",
    "parameters": {
      "mixing_type": "graph",
      "domain": "feature",
      "mixing_ratio": 0.2,
      "interaction_depth": 1
    },
    "complexity": "medium",
    "components": [
      "information_mixing",
      "cross_connections",
      "feature_interaction"
    ],
    "template_name": "{mixing_type}_{domain}_mixing"
  },
  {
    "name": "trend_hmm",
    "category": "temporal_processing",
    "description": "Process trend patterns using hmm methods",
    "parameters": {
      "temporal_pattern": "trend",
      "processing_type": "hmm",
      "model_order": 1,
      "smoothing_parameter": 0.1
    },
    "complexity": "complex",
    "components": [
      "temporal_modeling",
      "sequence_analysis",
      "time_series_decomposition"
    ],
    "template_name": "{temporal_pattern}_{processing_type}"
  },
  {
    "name": "cyclical_particle_filter",
    "category": "temporal_processing",
    "description": "Process cyclical patterns using particle_filter methods",
    "parameters": {
      "temporal_pattern": "cyclical",
      "processing_type": "particle_filter",
      "model_order": 3,
      "smoothing_parameter": 0.5
    },
    "complexity": "medium",
    "components": [
      "temporal_modeling",
      "sequence_analysis",
      "time_series_decomposition"
    ],
    "template_name": "{temporal_pattern}_{processing_type}"
  },
  {
    "name": "spectral_basis_pursuit_feature",
    "category": "feature_extraction",
    "description": "Extract spectral features using basis_pursuit decomposition",
    "parameters": {
      "domain": "spectral",
      "method": "basis_pursuit",
      "n_components": 32,
      "sparsity_level": 0.1
    },
    "complexity": "complex",
    "components": [
      "decomposition",
      "feature_selection",
      "dimensionality_reduction"
    ],
    "template_name": "{domain}_{method}_feature"
  },
  {
    "name": "hierarchical_cross_sectional_attention",
    "category": "attention",
    "description": "hierarchical attention mechanism for cross_sectional modeling",
    "parameters": {
      "attention_type": "hierarchical",
      "scope": "cross_sectional",
      "num_heads": 8,
      "attention_dropout": 0.2
    },
    "complexity": "complex",
    "components": [
      "attention_weights",
      "key_value_query",
      "attention_pooling"
    ],
    "template_name": "{attention_type}_{scope}_attention"
  },
  {
    "name": "mean_reversion_fractal",
    "category": "financial_domain",
    "description": "Analyze mean_reversion using fractal methodology",
    "parameters": {
      "market_property": "mean_reversion",
      "analysis_type": "fractal",
      "lookback_window": 50,
      "sensitivity": 0.1
    },
    "complexity": "complex",
    "components": [
      "market_microstructure",
      "price_dynamics",
      "risk_modeling"
    ],
    "template_name": "{market_property}_{analysis_type}"
  },
  {
    "name": "macro_factor_exposure",
    "category": "financial_domain",
    "description": "Calculate exposure to macro factors with dynamic weighting",
    "parameters": {
      "factor_type": "macro",
      "weighting_scheme": "equal",
      "rebalancing_frequency": 10,
      "decay_factor": 0.99
    },
    "complexity": "medium",
    "components": [
      "factor_modeling",
      "risk_decomposition",
      "attribution_analysis"
    ],
    "template_name": "{factor_type}_factor_exposure"
  },
  {
    "name": "wavelet_basis_pursuit_feature",
    "category": "feature_extraction",
    "description": "Extract wavelet features using basis_pursuit decomposition",
    "parameters": {
      "domain": "wavelet",
      "method": "basis_pursuit",
      "n_components": 32,
      "sparsity_level": 0.1
    },
    "complexity": "medium",
    "components": [
      "decomposition",
      "feature_selection",
      "dimensionality_reduction"
    ],
    "template_name": "{domain}_{method}_feature"
  },
  {
    "name": "jump_diffusion_fractal",
    "category": "financial_domain",
    "description": "Analyze jump_diffusion using fractal methodology",
    "parameters": {
      "market_property": "jump_diffusion",
      "analysis_type": "fractal",
      "lookback_window": 50,
      "sensitivity": 0.1
    },
    "complexity": "complex",
    "components": [
      "market_microstructure",
      "price_dynamics",
      "risk_modeling"
    ],
    "template_name": "{market_property}_{analysis_type}"
  },
  {
    "name": "style_factor_exposure",
    "category": "financial_domain",
    "description": "Calculate exposure to style factors with dynamic weighting",
    "parameters": {
      "factor_type": "style",
      "weighting_scheme": "equal",
      "rebalancing_frequency": 10,
      "decay_factor": 0.9
    },
    "complexity": "medium",
    "components": [
      "factor_modeling",
      "risk_decomposition",
      "attribution_analysis"
    ],
    "template_name": "{factor_type}_factor_exposure"
  },
  {
    "name": "jump_diffusion_stochastic",
    "category": "financial_domain",
    "description": "Analyze jump_diffusion using stochastic methodology",
    "parameters": {
      "market_property": "jump_diffusion",
      "analysis_type": "stochastic",
      "lookback_window": 100,
      "sensitivity": 0.5
    },
    "complexity": "medium",
    "components": [
      "market_microstructure",
      "price_dynamics",
      "risk_modeling"
    ],
    "template_name": "{market_property}_{analysis_type}"
  },
  {
    "name": "mean_reversion_fractal",
    "category": "financial_domain",
    "description": "Analyze mean_reversion using fractal methodology",
    "parameters": {
      "market_property": "mean_reversion",
      "analysis_type": "fractal",
      "lookback_window": 5,
      "sensitivity": 2.0
    },
    "complexity": "complex",
    "components": [
      "market_microstructure",
      "price_dynamics",
      "risk_modeling"
    ],
    "template_name": "{market_property}_{analysis_type}"
  },
  {
    "name": "geometric_dictionary_learning_feature",
    "category": "feature_extraction",
    "description": "Extract geometric features using dictionary_learning decomposition",
    "parameters": {
      "domain": "geometric",
      "method": "dictionary_learning",
      "n_components": 128,
      "sparsity_level": 0.7
    },
    "complexity": "complex",
    "components": [
      "decomposition",
      "feature_selection",
      "dimensionality_reduction"
    ],
    "template_name": "{domain}_{method}_feature"
  },
  {
    "name": "quality_factor_exposure",
    "category": "financial_domain",
    "description": "Calculate exposure to quality factors with dynamic weighting",
    "parameters": {
      "factor_type": "quality",
      "weighting_scheme": "volatility",
      "rebalancing_frequency": 1,
      "decay_factor": 0.95
    },
    "complexity": "medium",
    "components": [
      "factor_modeling",
      "risk_decomposition",
      "attribution_analysis"
    ],
    "template_name": "{factor_type}_factor_exposure"
  },
  {
    "name": "topological_manifold_learning_feature",
    "category": "feature_extraction",
    "description": "Extract topological features using manifold_learning decomposition",
    "parameters": {
      "domain": "topological",
      "method": "manifold_learning",
      "n_components": 32,
      "sparsity_level": 0.5
    },
    "complexity": "medium",
    "components": [
      "decomposition",
      "feature_selection",
      "dimensionality_reduction"
    ],
    "template_name": "{domain}_{method}_feature"
  },
  {
    "name": "cyclical_signal_decomp",
    "category": "feature_extraction",
    "description": "Decompose cyclical signals into interpretable components",
    "parameters": {
      "signal_type": "cyclical",
      "decomposition_method": "eemd",
      "n_modes": 10,
      "noise_threshold": 0.1
    },
    "complexity": "complex",
    "components": [
      "signal_processing",
      "basis_functions",
      "component_analysis"
    ],
    "template_name": "{signal_type}_signal_decomp"
  },
  {
    "name": "trend_hmm",
    "category": "temporal_processing",
    "description": "Process trend patterns using hmm methods",
    "parameters": {
      "temporal_pattern": "trend",
      "processing_type": "hmm",
      "model_order": 2,
      "smoothing_parameter": 0.7
    },
    "complexity": "medium",
    "components": [
      "temporal_modeling",
      "sequence_analysis",
      "time_series_decomposition"
    ],
    "template_name": "{temporal_pattern}_{processing_type}"
  },
  {
    "name": "graph_temporal_mixing",
    "category": "mixing",
    "description": "Mix information across temporal using graph mechanism",
    "parameters": {
      "mixing_type": "graph",
      "domain": "temporal",
      "mixing_ratio": 0.5,
      "interaction_depth": 1
    },
    "complexity": "medium",
    "components": [
      "information_mixing",
      "cross_connections",
      "feature_interaction"
    ],
    "template_name": "{mixing_type}_{domain}_mixing"
  },
  {
    "name": "wavelet_dictionary_learning_feature",
    "category": "feature_extraction",
    "description": "Extract wavelet features using dictionary_learning decomposition",
    "parameters": {
      "domain": "wavelet",
      "method": "dictionary_learning",
      "n_components": 32,
      "sparsity_level": 0.3
    },
    "complexity": "medium",
    "components": [
      "decomposition",
      "feature_selection",
      "dimensionality_reduction"
    ],
    "template_name": "{domain}_{method}_feature"
  },
  {
    "name": "sector_factor_exposure",
    "category": "financial_domain",
    "description": "Calculate exposure to sector factors with dynamic weighting",
    "parameters": {
      "factor_type": "sector",
      "weighting_scheme": "momentum",
      "rebalancing_frequency": 5,
      "decay_factor": 0.95
    },
    "complexity": "medium",
    "components": [
      "factor_modeling",
      "risk_decomposition",
      "attribution_analysis"
    ],
    "template_name": "{factor_type}_factor_exposure"
  },
  {
    "name": "local_feature_attention",
    "category": "attention",
    "description": "local attention mechanism for feature modeling",
    "parameters": {
      "attention_type": "local",
      "scope": "feature",
      "num_heads": 8,
      "attention_dropout": 0.1
    },
    "complexity": "simple",
    "components": [
      "attention_weights",
      "key_value_query",
      "attention_pooling"
    ],
    "template_name": "{attention_type}_{scope}_attention"
  },
  {
    "name": "structural_break_changepoint",
    "category": "temporal_processing",
    "description": "Process structural_break patterns using changepoint methods",
    "parameters": {
      "temporal_pattern": "structural_break",
      "processing_type": "changepoint",
      "model_order": 5,
      "smoothing_parameter": 0.3
    },
    "complexity": "medium",
    "components": [
      "temporal_modeling",
      "sequence_analysis",
      "time_series_decomposition"
    ],
    "template_name": "{temporal_pattern}_{processing_type}"
  },
  {
    "name": "cyclical_particle_filter",
    "category": "temporal_processing",
    "description": "Process cyclical patterns using particle_filter methods",
    "parameters": {
      "temporal_pattern": "cyclical",
      "processing_type": "particle_filter",
      "model_order": 2,
      "smoothing_parameter": 0.3
    },
    "complexity": "medium",
    "components": [
      "temporal_modeling",
      "sequence_analysis",
      "time_series_decomposition"
    ],
    "template_name": "{temporal_pattern}_{processing_type}"
  },
  {
    "name": "regime_switching_spectral",
    "category": "financial_domain",
    "description": "Analyze regime_switching using spectral methodology",
    "parameters": {
      "market_property": "regime_switching",
      "analysis_type": "spectral",
      "lookback_window": 20,
      "sensitivity": 0.5
    },
    "complexity": "complex",
    "components": [
      "market_microstructure",
      "price_dynamics",
      "risk_modeling"
    ],
    "template_name": "{market_property}_{analysis_type}"
  },
  {
    "name": "macro_factor_exposure",
    "category": "financial_domain",
    "description": "Calculate exposure to macro factors with dynamic weighting",
    "parameters": {
      "factor_type": "macro",
      "weighting_scheme": "risk_parity",
      "rebalancing_frequency": 10,
      "decay_factor": 0.9
    },
    "complexity": "simple",
    "components": [
      "factor_modeling",
      "risk_decomposition",
      "attribution_analysis"
    ],
    "template_name": "{factor_type}_factor_exposure"
  },
  {
    "name": "jump_diffusion_spectral",
    "category": "financial_domain",
    "description": "Analyze jump_diffusion using spectral methodology",
    "parameters": {
      "market_property": "jump_diffusion",
      "analysis_type": "spectral",
      "lookback_window": 10,
      "sensitivity": 0.5
    },
    "complexity": "medium",
    "components": [
      "market_microstructure",
      "price_dynamics",
      "risk_modeling"
    ],
    "template_name": "{market_property}_{analysis_type}"
  },
  {
    "name": "statistical_manifold_learning_feature",
    "category": "feature_extraction",
    "description": "Extract statistical features using manifold_learning decomposition",
    "parameters": {
      "domain": "statistical",
      "method": "manifold_learning",
      "n_components": 32,
      "sparsity_level": 0.7
    },
    "complexity": "medium",
    "components": [
      "decomposition",
      "feature_selection",
      "dimensionality_reduction"
    ],
    "template_name": "{domain}_{method}_feature"
  },
  {
    "name": "sparse_temporal_attention",
    "category": "attention",
    "description": "sparse attention mechanism for temporal modeling",
    "parameters": {
      "attention_type": "sparse",
      "scope": "temporal",
      "num_heads": 4,
      "attention_dropout": 0.1
    },
    "complexity": "medium",
    "components": [
      "attention_weights",
      "key_value_query",
      "attention_pooling"
    ],
    "template_name": "{attention_type}_{scope}_attention"
  },
  {
    "name": "transformer_cross_mixing",
    "category": "mixing",
    "description": "Cross-domain mixing using transformer architecture",
    "parameters": {
      "architecture": "transformer",
      "num_heads": 4,
      "mixing_layers": 3,
      "attention_type": "multiplicative"
    },
    "complexity": "complex",
    "components": [
      "cross_attention",
      "multi_head_interaction",
      "hierarchical_mixing"
    ],
    "template_name": "{architecture}_cross_mixing"
  },
  {
    "name": "convolution_cross_sectional_mixing",
    "category": "mixing",
    "description": "Mix information across cross_sectional using convolution mechanism",
    "parameters": {
      "mixing_type": "convolution",
      "domain": "cross_sectional",
      "mixing_ratio": 0.8,
      "interaction_depth": 1
    },
    "complexity": "medium",
    "components": [
      "information_mixing",
      "cross_connections",
      "feature_interaction"
    ],
    "template_name": "{mixing_type}_{domain}_mixing"
  },
  {
    "name": "gated_feature_mixing",
    "category": "mixing",
    "description": "Mix information across feature using gated mechanism",
    "parameters": {
      "mixing_type": "gated",
      "domain": "feature",
      "mixing_ratio": 0.2,
      "interaction_depth": 2
    },
    "complexity": "medium",
    "components": [
      "information_mixing",
      "cross_connections",
      "feature_interaction"
    ],
    "template_name": "{mixing_type}_{domain}_mixing"
  },
  {
    "name": "statistical_basis_pursuit_feature",
    "category": "feature_extraction",
    "description": "Extract statistical features using basis_pursuit decomposition",
    "parameters": {
      "domain": "statistical",
      "method": "basis_pursuit",
      "n_components": 32,
      "sparsity_level": 0.1
    },
    "complexity": "complex",
    "components": [
      "decomposition",
      "feature_selection",
      "dimensionality_reduction"
    ],
    "template_name": "{domain}_{method}_feature"
  },
  {
    "name": "adaptive_feature_attention",
    "category": "attention",
    "description": "adaptive attention mechanism for feature modeling",
    "parameters": {
      "attention_type": "adaptive",
      "scope": "feature",
      "num_heads": 4,
      "attention_dropout": 0.1
    },
    "complexity": "simple",
    "components": [
      "attention_weights",
      "key_value_query",
      "attention_pooling"
    ],
    "template_name": "{attention_type}_{scope}_attention"
  },
  {
    "name": "local_multi_scale_attention",
    "category": "attention",
    "description": "local attention mechanism for multi_scale modeling",
    "parameters": {
      "attention_type": "local",
      "scope": "multi_scale",
      "num_heads": 8,
      "attention_dropout": 0.3
    },
    "complexity": "complex",
    "components": [
      "attention_weights",
      "key_value_query",
      "attention_pooling"
    ],
    "template_name": "{attention_type}_{scope}_attention"
  },
  {
    "name": "attention_weighted_adaptive_norm",
    "category": "normalization",
    "description": "Adaptive normalization with attention_weighted adjustment mechanism",
    "parameters": {
      "adaptive_type": "attention_weighted",
      "adaptation_rate": 0.05,
      "context_window": 5
    },
    "complexity": "complex",
    "components": [
      "adaptive_scaling",
      "learned_parameters",
      "context_aware"
    ],
    "template_name": "{adaptive_type}_adaptive_norm"
  },
  {
    "name": "sector_factor_exposure",
    "category": "financial_domain",
    "description": "Calculate exposure to sector factors with dynamic weighting",
    "parameters": {
      "factor_type": "sector",
      "weighting_scheme": "risk_parity",
      "rebalancing_frequency": 1,
      "decay_factor": 0.99
    },
    "complexity": "complex",
    "components": [
      "factor_modeling",
      "risk_decomposition",
      "attribution_analysis"
    ],
    "template_name": "{factor_type}_factor_exposure"
  },
  {
    "name": "global_multi_scale_attention",
    "category": "attention",
    "description": "global attention mechanism for multi_scale modeling",
    "parameters": {
      "attention_type": "global",
      "scope": "multi_scale",
      "num_heads": 8,
      "attention_dropout": 0.1
    },
    "complexity": "medium",
    "components": [
      "attention_weights",
      "key_value_query",
      "attention_pooling"
    ],
    "template_name": "{attention_type}_{scope}_attention"
  },
  {
    "name": "multi_head_multi_scale_attention",
    "category": "attention",
    "description": "multi_head attention mechanism for multi_scale modeling",
    "parameters": {
      "attention_type": "multi_head",
      "scope": "multi_scale",
      "num_heads": 32,
      "attention_dropout": 0.3
    },
    "complexity": "medium",
    "components": [
      "attention_weights",
      "key_value_query",
      "attention_pooling"
    ],
    "template_name": "{attention_type}_{scope}_attention"
  },
  {
    "name": "sparse_cross_sectional_attention",
    "category": "attention",
    "description": "sparse attention mechanism for cross_sectional modeling",
    "parameters": {
      "attention_type": "sparse",
      "scope": "cross_sectional",
      "num_heads": 4,
      "attention_dropout": 0.2
    },
    "complexity": "simple",
    "components": [
      "attention_weights",
      "key_value_query",
      "attention_pooling"
    ],
    "template_name": "{attention_type}_{scope}_attention"
  },
  {
    "name": "mean_reversion_stochastic",
    "category": "financial_domain",
    "description": "Analyze mean_reversion using stochastic methodology",
    "parameters": {
      "market_property": "mean_reversion",
      "analysis_type": "stochastic",
      "lookback_window": 20,
      "sensitivity": 1.0
    },
    "complexity": "complex",
    "components": [
      "market_microstructure",
      "price_dynamics",
      "risk_modeling"
    ],
    "template_name": "{market_property}_{analysis_type}"
  },
  {
    "name": "nuclear_weights_regularizer",
    "category": "regularization",
    "description": "Apply nuclear regularization to weights",
    "parameters": {
      "regularization_type": "nuclear",
      "target": "weights",
      "regularization_strength": 0.01,
      "adaptation_rate": 0.1
    },
    "complexity": "complex",
    "components": [
      "regularization",
      "constraint_enforcement",
      "penalty_application"
    ],
    "template_name": "{regularization_type}_{target}_regularizer"
  },
  {
    "name": "jump_diffusion_fractal",
    "category": "financial_domain",
    "description": "Analyze jump_diffusion using fractal methodology",
    "parameters": {
      "market_property": "jump_diffusion",
      "analysis_type": "fractal",
      "lookback_window": 50,
      "sensitivity": 1.0
    },
    "complexity": "complex",
    "components": [
      "market_microstructure",
      "price_dynamics",
      "risk_modeling"
    ],
    "template_name": "{market_property}_{analysis_type}"
  },
  {
    "name": "momentum_fractal",
    "category": "financial_domain",
    "description": "Analyze momentum using fractal methodology",
    "parameters": {
      "market_property": "momentum",
      "analysis_type": "fractal",
      "lookback_window": 10,
      "sensitivity": 2.0
    },
    "complexity": "medium",
    "components": [
      "market_microstructure",
      "price_dynamics",
      "risk_modeling"
    ],
    "template_name": "{market_property}_{analysis_type}"
  },
  {
    "name": "elastic_weights_regularizer",
    "category": "regularization",
    "description": "Apply elastic regularization to weights",
    "parameters": {
      "regularization_type": "elastic",
      "target": "weights",
      "regularization_strength": 0.01,
      "adaptation_rate": 0.01
    },
    "complexity": "medium",
    "components": [
      "regularization",
      "constraint_enforcement",
      "penalty_application"
    ],
    "template_name": "{regularization_type}_{target}_regularizer"
  },
  {
    "name": "exponential_temporal_norm",
    "category": "normalization",
    "description": "exponential normalization applied to temporal for feature_enhancement",
    "parameters": {
      "normalization_type": "exponential",
      "scope": "temporal",
      "purpose": "feature_enhancement"
    },
    "complexity": "medium",
    "components": [
      "normalization",
      "scaling",
      "centering"
    ],
    "template_name": "{normalization_type}_{scope}_norm"
  },
  {
    "name": "structured_weights_regularizer",
    "category": "regularization",
    "description": "Apply structured regularization to weights",
    "parameters": {
      "regularization_type": "structured",
      "target": "weights",
      "regularization_strength": 1.0,
      "adaptation_rate": 0.01
    },
    "complexity": "complex",
    "components": [
      "regularization",
      "constraint_enforcement",
      "penalty_application"
    ],
    "template_name": "{regularization_type}_{target}_regularizer"
  },
  {
    "name": "geometric_sparse_coding_feature",
    "category": "feature_extraction",
    "description": "Extract geometric features using sparse_coding decomposition",
    "parameters": {
      "domain": "geometric",
      "method": "sparse_coding",
      "n_components": 128,
      "sparsity_level": 0.7
    },
    "complexity": "medium",
    "components": [
      "decomposition",
      "feature_selection",
      "dimensionality_reduction"
    ],
    "template_name": "{domain}_{method}_feature"
  },
  {
    "name": "regime_switching_fractal",
    "category": "financial_domain",
    "description": "Analyze regime_switching using fractal methodology",
    "parameters": {
      "market_property": "regime_switching",
      "analysis_type": "fractal",
      "lookback_window": 10,
      "sensitivity": 0.5
    },
    "complexity": "medium",
    "components": [
      "market_microstructure",
      "price_dynamics",
      "risk_modeling"
    ],
    "template_name": "{market_property}_{analysis_type}"
  },
  {
    "name": "trend_hmm",
    "category": "temporal_processing",
    "description": "Process trend patterns using hmm methods",
    "parameters": {
      "temporal_pattern": "trend",
      "processing_type": "hmm",
      "model_order": 1,
      "smoothing_parameter": 0.7
    },
    "complexity": "medium",
    "components": [
      "temporal_modeling",
      "sequence_analysis",
      "time_series_decomposition"
    ],
    "template_name": "{temporal_pattern}_{processing_type}"
  }
]